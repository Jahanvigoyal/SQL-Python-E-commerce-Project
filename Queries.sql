-- 1. List all unique cities where customers are located --

select distinct customer_city from customers;

-- 2. Count the number of orders placed in 2017. --

select count(order_id) from orders where extract(year from order_purchase_timestamp::TIMESTAMP) = 2017



-- 3. Find the total sales per category. -- 

-- round function for roundoff the value of total_sales , ::numeric its mean it belongs to numeric 
select p.product_category, round(sum(pa.payment_value)::numeric,2) as total_sales
from order_items oi  join products p  on oi.product_id = p.product_id
join payments pa on pa.order_id = oi.order_id
group by p.product_category  order by  total_sales desc;



-- 4. Calculate the percentage of orders that were paid in installments.

select round( (( sum(payment_installments) / sum(payment_value)  )*100 )::numeric ,2 ) 


-- 5. Count the number of customers from each state.
select customer_state, Count(customer_id) as count from customers group by customer_state  order by count;

-- Intermediate ->
-- 1. Calculate the number of orders per month in 2018.

select to_char(order_purchase_timestamp::timestamp, 'Month') as month,
       count(order_id) as total_orders
from orders
where extract(year from order_purchase_timestamp::timestamp) = 2018
group by to_char(order_purchase_timestamp::timestamp, 'Month'),
         extract(month from order_purchase_timestamp::timestamp)
order by extract(month from order_purchase_timestamp::timestamp);

-- 2. Calculate the percentage of total revenue contributed by each product category.


select p.product_category,
        round(((sum(pa.payment_value) / (select sum(payment_value)from payments))*100)::numeric,2) as percentage
from order_items oi  join products p  on oi.product_id = p.product_id
join payments pa on pa.order_id = oi.order_id
group by p.product_category ;


-- 3. Identify the correlation between product price and the number of times a product has been purchased by category.
select pr.product_category,count(pr.product_id),
       round(avg(oi.price)::numeric,2) as average
from products pr 
       join order_items oi on pr.product_id=oi.product_id
group by pr.product_category ;

-- 4. Calculate the total revenue generated by each seller, and rank them by revenue.

  -- syntax of rank() -> RANK() OVER (ORDER BY <expression>)
-- Always use -> DENSE_RANK() Because it gives 1,2,2,2,3  and Rank() gives 1,2,2,4

select seller_id, round(sum(price)::numeric,2) ,dense_rank() over (order by sum(price)desc) as rank 
from order_items 
       group by seller_id;

-- Advanced Queries ->>>>
-- 1. Calculate the cumulative sales per month for each year.
select year,months,sales ,sum(sales)
         over (order by year,months) from 
        (select extract(month from o.order_purchase_timestamp::timestamp) as months,
        extract(year from o.order_purchase_timestamp::timestamp)as year,
	   round(sum(pa.payment_value)::numeric ,2) as sales
       from orders o join payments pa  
	   on pa.order_id=o.order_id
	   group by extract(month from o.order_purchase_timestamp::timestamp),
	   extract(year from o.order_purchase_timestamp::timestamp)
	   order by  extract(year from o.order_purchase_timestamp::timestamp),
	   extract(month from o.order_purchase_timestamp::timestamp))as a;

-- 2. Calculate the year-over-year growth rate of total sales.

 -- (current - previous) / previous * 100 â†’  its give percent of growth
 -- lag(payment_value) over (order by order_id) <-- syntax
select 
    year,
    round(lag(total_sales) over (order by year)::numeric,2) as prev_year_sales,
   round((((total_sales-(lag(total_sales) over (order by year)))
	/ lag(total_sales) over (order by year) )  *100)::numeric ,2) as year_over_year_growth
from 
(select extract(year from o.order_purchase_timestamp::timestamp) as year,sum(pa.payment_value) as total_sales
from orders o join payments pa on o.order_id=pa.order_id 
group by extract(year from o.order_purchase_timestamp::timestamp))as a;

-- 3. Identify the top 3 customers who spent the most money in each year.


with ranked_customers as (
select extract(year from o.order_purchase_timestamp:: timestamp) as year,
        o.customer_id,sum(pa.payment_value) as total_spent,
  dense_rank() over ( partition by extract(year from o.order_purchase_timestamp:: timestamp)
            order by sum(pa.payment_value) desc) as rank
    from orders o
    join payments pa on o.order_id = pa.order_id
    group by year, o.customer_id)
select *
from ranked_customers
where rank <= 3
order by year, rank;
